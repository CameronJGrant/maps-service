/*
 * StrafesNET Submissions - OpenAPI 3.1
 *
 * Browse and manage map submissions in the staging pipeline.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubmissionCreate {
    #[serde(rename = "DisplayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "Creator", skip_serializing_if = "Option::is_none")]
    pub creator: Option<String>,
    #[serde(rename = "GameID", skip_serializing_if = "Option::is_none")]
    pub game_id: Option<i32>,
    #[serde(rename = "Submitter", skip_serializing_if = "Option::is_none")]
    pub submitter: Option<i64>,
    #[serde(rename = "AssetID", skip_serializing_if = "Option::is_none")]
    pub asset_id: Option<i64>,
    #[serde(rename = "AssetVersion", skip_serializing_if = "Option::is_none")]
    pub asset_version: Option<i64>,
    #[serde(rename = "SubmissionType", skip_serializing_if = "Option::is_none")]
    pub submission_type: Option<i32>,
    #[serde(rename = "TargetAssetID", skip_serializing_if = "Option::is_none")]
    pub target_asset_id: Option<i64>,
}

impl SubmissionCreate {
    pub fn new() -> SubmissionCreate {
        SubmissionCreate {
            display_name: None,
            creator: None,
            game_id: None,
            submitter: None,
            asset_id: None,
            asset_version: None,
            submission_type: None,
            target_asset_id: None,
        }
    }
}

